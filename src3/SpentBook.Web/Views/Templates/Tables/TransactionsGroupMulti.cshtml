@model List<GraphQuery.Expression<SpentBook.Domain.TransactionGroup>>
@using GraphQuery;

<table class="table tree table-striped">
    <thead>
        <tr>
            <th></th>
            <th>Total</th>
            <th>%</th>
            <th>Frequência</th>
            <th>%</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var expression in Model)
        {
            foreach (var expressionItem in expression)
            {   
                if (expressionItem.Index == 0)
                { 
                    <tr>
                        <td><strong>Total</strong></td>
                        <td><strong>@expressionItem.Entity.Total</strong></td>
                        <td>-</td>
                        <td><strong>@expressionItem.Entity.Count</strong></td>
                        <td>-</td>
                    </tr>
                }
                else
                {
                    var hasChildren = expressionItem.HasChildren();
                    var totalPercent = !hasChildren ? expressionItem.Entity.TotalPercentage.Last().ToString("0.00") + "%" : "";
                    var countPercent = !hasChildren ? expressionItem.Entity.CountPercentage.Last().ToString("0.00") + "%" : "";
                    var classHasHildren = hasChildren ? "has-children" : "";
                    var classParent = expressionItem.Level > 2 ? "treegrid-parent-" + expressionItem.Parent.Id : "";
                    var classAlternative = expressionItem.Index % 2 == 0 ? "pair" : "odd";
                    
                    <tr class="treegrid-@expressionItem.Id @classParent @classHasHildren @classAlternative">
                        <td>@expressionItem.ToString()</td>
                        <td>@expressionItem.Entity.Total</td>
                        <td>@totalPercent</td>
                        <td>@expressionItem.Entity.Count</td>
                        <td>@countPercent</td>
                    </tr>
                }
            }
        }
    </tbody>
</table>